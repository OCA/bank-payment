# -*- encoding: utf-8 -*-
##############################################################################
#
#    PAIN Base module for OpenERP
#    Copyright (C) 2013 Akretion (http://www.akretion.com)
#    Copyright (C) 2013 Noviat (http://www.noviat.com)
#    @author: Alexis de Lattre <alexis.delattre@akretion.com>
#    @author: Luc de Meyer (Noviat)
#    Copyright (C) 2015 Serv. Tecnol. Avanzados (www.serviciosbaeza.com)
#    @author: Pedro M. Baeza <pedro.baeza@serviciosbaeza.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from openerp import models, fields, api, exceptions, _
import logging

logger = logging.getLogger(__name__)


class ResCompany(models.Model):
    _inherit = 'res.company'

    @api.model
    def _initiating_party_issuer_default(self):
        """If you need to add support for an additionnal country, you can
        add an entry in the dict "party_issuer_per_country" here
        or inherit this function in the localization modules for
        your country"""
        initiating_party_issuer = ''
        # If your country require the 'Initiating Party Issuer', you should
        # contribute the entry for your country in the dict below
        party_issuer_per_country = {
            'BE': 'KBO-BCE',  # KBO-BCE = the registry of companies in Belgium
        }
        company_id = self._company_default_get('res.company')
        if company_id:
            company = self.browse(company_id)
            country_code = company.country_id.code
            initiating_party_issuer = party_issuer_per_country.get(
                country_code, '')
        return initiating_party_issuer

    @api.model
    def _initiating_party_issuer_def(self):
        return self._initiating_party_issuer_default()

    initiating_party_issuer = fields.Char(
        'Initiating Party Issuer', size=35,
        help="This will be used as the 'Initiating Party Issuer' in the "
        "PAIN files generated by Odoo.", default=_initiating_party_issuer_def)
    initiating_party_identifier = fields.Char(
        string='SEPA Initiating Party Identifier', size=35,
        help="Enter the SEPA Initiating Party Identifier that has been "
             "attributed to your company to make SEPA operations. This "
             "identifier is composed of :\n- your country ISO code (2 "
             "letters)\n- a 2-digits checkum\n- a 3-letters business "
             "code\n- a country-specific identifier",
        oldname="sepa_creditor_identifier")

    @api.model
    def _get_initiating_party_identifier(self, company_id):
        """The code here may be different from one country to another.
        If you need to add support for an additionnal country, you can
        contribute your code here or inherit this function in the
        localization modules for your country"""
        assert isinstance(company_id, int), 'Only one company ID'
        company = self.browse(company_id)
        company_vat = company.vat
        party_identifier = company.initiating_party_identifier
        if not party_identifier and company_vat:
            country_code = company_vat[0:2].upper()
            if country_code == 'BE':
                party_identifier = company_vat[2:].replace(' ', '')
        return party_identifier

    def is_initiating_party_identifier_valid(
            self, initiating_party_identifier):
        """Check if SEPA Creditor Identifier is valid
        @param initiating_party_identifier: SEPA Initiating Party Identifier
            as str or unicode
        @return: True if valid, False otherwise
        """
        if not isinstance(initiating_party_identifier, (str, unicode)):
            return False
        try:
            ipi = str(initiating_party_identifier).lower()
        except:
            logger.warning(
                "SEPA Creditor ID should contain only ASCII caracters.")
            return False
        if len(ipi) < 9:
            return False
        before_replacement = ipi[7:] + ipi[0:2] + '00'
        logger.debug(
            "SEPA ID check before_replacement = %s" % before_replacement)
        after_replacement = ''
        for char in before_replacement:
            if char.isalpha():
                after_replacement += str(ord(char) - 87)
            else:
                after_replacement += char
        logger.debug(
            "SEPA ID check after_replacement = %s" % after_replacement)
        return int(ipi[2:4]) == (98 - (int(after_replacement) % 97))

    @api.one
    @api.constrains('initiating_party_identifier')
    def _check_initiating_party_identifier(self):
        if self.initiating_party_identifier:
            if not self.is_initiating_party_identifier_valid(
                    self.initiating_party_identifier):
                raise exceptions.Warning(
                    _("Invalid SEPA Initiating Party Identifier."))
