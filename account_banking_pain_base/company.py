# -*- encoding: utf-8 -*-
##############################################################################
#
#    PAIN Base module for OpenERP
#    Copyright (C) 2013 Akretion (http://www.akretion.com)
#    Copyright (C) 2013 Noviat (http://www.noviat.com)
#    @author: Alexis de Lattre <alexis.delattre@akretion.com>
#    @author: Luc de Meyer (Noviat)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from openerp.osv import orm, fields
from openerp import pooler


class res_company(orm.Model):
    _inherit = 'res.company'

    _columns = {
        'initiating_party_issuer': fields.char(
            'Initiating Party Issuer', size=35,
            help="This will be used as the 'Initiating Party Issuer' in the "
            "PAIN files generated by OpenERP."),
    }

    # [ antoniov: 2015-07-01] For italian localization
    def _get_country(self, cr, uid, company_obj, context=None):
        """Some customizing is country dependent"""
        context = {} if context is None else context
        country_id = None
        country_code = None
        if company_obj.country_id:
            country_id = company_obj.country_id
            c_obj = pooler.get_pool(cr.dbname).\
                get('res.country').browse(cr, uid, uid)
            country_code = c_obj.code
        if company_obj.vat:
            country_code = company_obj.vat[0:2].upper()
        return country_id, country_code

    # [ antoniov: 2015-07-01] Added party type
    def _get_initiating_party_identifier(
            self, cr, uid, company_id, party_type=None, context=None):
        '''The code here may be different from one country to another.
        If you need to add support for an additionnal country, you can
        contribute your code here or inherit this function in the
        localization modules for your country'''
        context = {} if context is None else context
        assert isinstance(company_id, int), 'Only one company ID'
        # [antoniov: 2017-07-01]
        # country code loaded by 'generate_initiating_party_block'
        country_code = context.get('country_code')
        company = self.browse(cr, uid, company_id, context=context)
        # following code is called just if 'banking_export_pain' program
        # (module account_banking_pain_base) .. is not upgraded!!
        # TODO: remove ASAP
        if not country_code:
            country_id, country_code = self._get_country(cr, uid,
                                                         company,
                                                         context=context)
        company_vat = company.vat
        party_identifier = False
        if (party_type and party_type == 'Dbtr' or
                party_type and party_type == 'Cdtr') and\
                country_code == 'IT':
            party_identifier = company_vat[2:].replace(' ', '')
        elif country_code == 'BE' and company_vat:
            party_identifier = company_vat[2:].replace(' ', '')
        elif country_code == 'ES':
            party_identifier = company.sepa_creditor_identifier
        else:
            # if some module has defined 'sepa_creditor_identifier' use it
            if hasattr(company, 'sepa_creditor_identifier'):
                party_identifier = company.sepa_creditor_identifier
            else:
                party_identifier = company.initiating_party_issuer
        return party_identifier

    def _initiating_party_issuer_default(self, cr, uid, context=None):
        '''If you need to add support for an additionnal country, you can
        add an entry in the dict "party_issuer_per_country" here
        or inherit this function in the localization modules for
        your country'''
        initiating_party_issuer = ''
        # If your country require the 'Initiating Party Issuer', you should
        # contribute the entry for your country in the dict below
        party_issuer_per_country = {
            'BE': 'KBO-BCE',  # KBO-BCE = the registry of companies in Belgium
            'IT': 'CBI',      # CBI = Corporate Banking Italy
        }
        company_id = self._company_default_get(
            cr, uid, 'res.company', context=context)
        initiating_party_issuer = None
        if company_id:
            company = self.browse(cr, uid, company_id, context=context)
            # country_code = company.country_id.code
            country_id, country_code = self._get_country(cr, uid,
                                                         company, context)
            initiating_party_issuer = party_issuer_per_country.get(
                country_code, None)
        return initiating_party_issuer

    def _initiating_party_issuer_def(self, cr, uid, context=None):
        return self._initiating_party_issuer_default(
            cr, uid, context=context)

    def _get_initiating_party_issuer(self, cr, uid, context=None):
        return self._initiating_party_issuer_default(
            cr, uid, context=context)

    _defaults = {
        'initiating_party_issuer': _initiating_party_issuer_def,
    }
